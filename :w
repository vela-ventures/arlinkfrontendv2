"use client";

import {
    type ChartConfig,
    ChartContainer,
    ChartTooltip,
    ChartTooltipContent,
} from "@/components/ui/chart";

import {
    Area,
    AreaChart,
    CartesianGrid,
    ResponsiveContainer,
    XAxis,
    YAxis,
} from "recharts";

import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";

import { ArrowDown, ArrowUp } from "lucide-react";

// Assuming this interface exists in your types file
interface ChartDetailInterface {
    name: string;
    value: string;
    description?: string;
    volatility?: {
        type: "up" | "down";
        value: number;
    };
    data: Array<{
        value: number;
        date: string;
    }>;
}

export const VerticalChartCard = ({
    chartDetail,
    chartConfig,
}: {
    chartDetail: ChartDetailInterface;
    chartConfig: ChartConfig;
}) => {
    const safeId = chartDetail.name.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase();

    return (
        <Card className="overflow-hidden">
            <CardHeader className="pb-2">
                <CardTitle className="text-xl">{chartDetail.name}</CardTitle>
                {chartDetail?.description && (
                    <CardDescription className="text-sm">
                        {chartDetail.description}
                    </CardDescription>
                )}
                <div className="flex items-center mt-1">
                    <p className="text-2xl font-semibold">
                        {chartDetail.value}
                    </p>
                    {chartDetail.volatility && (
                        <div className="flex items-center space-x-1 text-xs ml-4">
                            {chartDetail.volatility.type === "up" ? (
                                <ArrowUp className="h-3 w-3 text-green-500" />
                            ) : (
                                <ArrowDown className="h-3 w-3 text-red-500" />
                            )}
                            <span
                                className={
                                    chartDetail.volatility.type === "up"
                                        ? "text-green-500"
                                        : "text-red-500"
                                }
                            >
                                {chartDetail.volatility.value}%
                            </span>
                        </div>
                    )}
                </div>
            </CardHeader>
            <CardContent className="px-4 pt-2">
                <div className="h-[200px] w-full px-2 pb-4">
                    <ChartContainer
                        config={chartConfig}
                        className="h-full w-full"
                    >
                        <ResponsiveContainer width="100%" height="100%">
                            <AreaChart
                                accessibilityLayer
                                data={chartDetail.data}
                                margin={{
                                    top: 10,
                                    right: 10,
                                    left: 0,
                                    bottom: 10,
                                }}
                            >
                                <CartesianGrid vertical={false} opacity={1} />

                                <YAxis
                                    hide={false}
                                    tickLine={false}
                                    axisLine={false}
                                    tickFormatter={(value) => value.toString()}
                                    fontSize={12}
                                    width={20}
                                />
                                <ChartTooltip
                                    cursor={false}
                                    content={<ChartTooltipContent />}
                                />
                                <defs>
                                    <linearGradient
                                        id={`fill-${safeId}`}
                                        x1="0"
                                        y1="0"
                                        x2="0"
                                        y2="1"
                                    >
                                        <stop
                                            offset="5%"
                                            stopColor="var(--color-primary)"
                                            stopOpacity={0.8}
                                        />
                                        <stop
                                            offset="95%"
                                            stopColor="var(--color-primary)"
                                            stopOpacity={0.1}
                                        />
                                    </linearGradient>
                                </defs>
                                <Area
                                    dataKey="value"
                                    type="natural"
                                    fill={`url(#fill-${safeId})`}
                                    fillOpacity={0.4}
                                    stroke="var(--color-primary)"
                                    strokeWidth={2}
                                />
                            </AreaChart>
                        </ResponsiveContainer>
                    </ChartContainer>
                </div>
            </CardContent>
        </Card>
    );
};
